import assert from 'assert';

/**
 * Ограниченный рюкзак (англ. Bounded Knapsack Problem) — обобщение классической задачи, когда любой предмет может быть взят некоторое количество раз.
 *
 * Гуляя по одному из островов Алгосского архипелага, Гоша набрёл на пещеру, в которой лежат кучи золотого песка.
 * К счастью, у Гоши есть с собой рюкзак грузоподъёмностью до M килограмм, поэтому он может унести с собой какое-то ограниченное количество золота.
 *
 * Всего золотых куч n штук, и все они разные. В куче под номером i содержится mi килограммов золотого песка,
 * а стоимость одного килограмма — ci алгосских франков.
 * Помогите Гоше наполнить рюкзак так, чтобы общая стоимость золотого песка в пересчёте на алгосские франки была максимальной.
 *
 * Формат ввода
 * В первой строке задано целое число M — грузоподъёмность рюкзака Гоши (0 ≤ M ≤ 108).
 * Во второй строке дано количество куч с золотым песком — целое число n (1 ≤ n ≤ 105).
 *
 * В каждой из следующих n строк описаны кучи: i-ая куча задаётся двумя целыми числами ci и mi,
 * записанными через пробел (1 ≤ ci ≤ 107, 1 ≤ mi ≤ 108).
 *
 * Формат вывода
 * Выведите единственное число —– максимальную сумму (в алгосских франках), которую Гоша сможет вынести из пещеры в своём рюкзаке.
 */

function maxKnapsackCost(maxWeight, heaps) {
  heaps.sort((a, b) => b[0] - a[0]);

  let maxCost = 0;
  let leftWeight = maxWeight;

  for (let [cost, kgs] of heaps) {
    while (leftWeight > 0 && kgs > 0) {
      kgs--;
      leftWeight--;
      maxCost += cost;
    }

    if (leftWeight === 0) {
      break;
    }
  }

  return maxCost;
}

function test(fn) {
  assert.deepStrictEqual(
    fn(10, [
      [8, 1],
      [2, 10],
      [4, 5],
    ]),
    36,
    fn.name,
  );
}

test(maxKnapsackCost);
