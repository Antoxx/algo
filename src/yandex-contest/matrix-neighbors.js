import assert from 'assert';

/**
 * Дана матрица. Нужно написать функцию, которая для элемента возвращает всех его соседей.
 * Соседним считается элемент, находящийся от текущего на одну ячейку влево, вправо, вверх или вниз.
 * Диагональные элементы соседними не считаются. Например, в матрице A соседними элементами для (0, 0) будут 2 и 0. А для (2, 1) –— 1, 2, 7, 7.
 *
 * Формат ввода
 * В первой строке задано n — количество строк матрицы. Во второй — количество столбцов m. Числа m и n не превосходят 1000.
 * В следующих n строках задана матрица. Элементы матрицы — целые числа, по модулю не превосходящие 1000.
 * В последних двух строках записаны координаты элемента, соседей которого нужно найти. Индексация начинается с нуля.
 *
 * Формат вывода
 * Напечатайте нужные числа в возрастающем порядке через пробел.
 */

function getNeighbors(matrix, x, y) {
  const ans = [];
  const neighbors = [
    [x, y - 1],
    [x, y + 1],
    [x - 1, y],
    [x + 1, y],
  ];

  for (let [x2, y2] of neighbors) {
    if (x2 < 0 || y2 < 0 || x2 >= matrix.length || y2 >= matrix[0].length) {
      continue;
    }

    ans.push(matrix[x2][y2]);
  }

  return ans;
}

function test(fn) {
  const matrix = [
    [1, 2, 3],
    [0, 2, 6],
    [7, 4, 1],
    [2, 7, 0],
  ];

  assert.deepStrictEqual(fn(matrix, 0, 0), [2, 0], fn.name);
  assert.deepStrictEqual(fn(matrix, 2, 1), [7, 1, 2, 7], fn.name);
  assert.deepStrictEqual(fn(matrix, 3, 0), [7, 7], fn.name);
}

test(getNeighbors);
